{
	"django:model_template_basic": {
		"scope": "python",
		"prefix": "django:model_basic",
		"body": [
			"class $class_name(models.Model):",
			"    id = models.AutoField(primary_key=True)",
			"    $atributo = models.CharField(max_length=200)",
			"",
			"    class Meta():",
			"        db_table = '$table'",
		],
	},
	"django:form_template_basic": {
		"scope": "python",
		"prefix": "django:form_basic",
		"body": [
			"class ${1:$class_name}Form(BaseFormRinaApp):",
			"    class Meta():",
			"        model = ${1:$class_name}",
			"        fields = ['id', '$attribute']"
		],
	},
	"django:table_template_basic": {
		"scope": "python",
		"prefix": "django:table_basic",
		"body": [
			"class ${1:$class_name}Table(BaseRinaAppTable):",
			"    class Meta():",
			"        model = ${1:$class_name}",
			"        fields = ('col_edit','col_delete','id', '$attribute')",
			"",
			"row_attrs = {",
			"    'data-id': lambda record: record.pk,",
			"    'data-view': get_url('rina_app:edit_$page_name')",
			"}"
		],
	},
	"django:tableFilter_template_basic": {
		"scope": "python",
		"prefix": "django:tableFilter_basic",
		"body": [
			"class ${1:$class_name}Filter(FilterSet):",
			"    ${2:$attribute} = CharFilter(",
			"        field_name='${2:$attribute}', ",
			"        lookup_expr='icontains',",
			"        label='$label:'",
			"    )",
			"",
			"    class Meta():",
			"        model = ${1:$class_name}",
			"        fields = ['${2:$attribute}']"
		],
	},
	"django:view_template_basic": {
		"scope": "python",
		"prefix": "django:view_basic",
		"body": [
			"@login_required",
			"def ${1:$method_and_page_name}(request): #Talvez tenha que adicionar 'recursos'",
			"",
			"    if request.method == 'GET':",
			"        form = ${2:$class_name}Form()",
			"        (filter, table) = filter_tables(request, ${2:$class_name}, ${2:$class_name}Table, ${2:$class_name}Filter)",
			"",
			"        return render(request, 'rina_app/form_input_view_template.html', {",
			"            'form': form,",
			"            'form_page_title': '${3:$page_title}',",
			"            'table': table,",
			"            'edit_form': form,",
			"            'action_url': reverse_lazy('rina_app:edit_${1:$method_and_page_name}'),",
			"            'filter_form': filter",
			"            })",
			"",
			"@login_required",
			"def edit_${1:$method_and_page_name}(request):",
			"",
			"    j_request = json.loads(json.dumps(request.POST))",
			"",
			"    # Form POST adicionar",
			"    if request.method == 'POST' and 'input' in request.POST:",
			"        return add_item(request, ${2:$class_name}Form, reverse_lazy('rina_app:${1:$method_and_page_name}')) #Talvez tenha que adicionar 'recursos'",
			"",
			"    # Form POST editar",
			"    elif request.method == 'POST' and 'edit' in request.POST:",
			"        form = ${2:$class_name}Form(request.POST)",
			"",
			"        if form.is_valid():",
			"",
			"           id = form.cleaned_data.get('data_id')",
			"           obj = get_object_or_404(${2:$class_name}, pk=id)",
			"           obj.${4:$attribute} = form.cleaned_data.get('${4:$attribute}')",
			"           obj.save()",
			"",
			"           return HttpResponseRedirect(reverse_lazy('rina_app:${1:$method_and_page_name}')) #Talvez tenha que adicionar 'recursos'",
			"",
			"    #AJAX POST deletar",
			"    elif request.method == 'POST' and j_request['action'] == 'delete':",
			"        return delet_item(request, ${2:$class_name})",
			"",
			"    #AJAX POST ler",
			"    elif request.method == 'POST' and j_request['action'] == 'get-data':",
			"        return get_item_data(request, ${2:$class_name})",
		],
	},
}